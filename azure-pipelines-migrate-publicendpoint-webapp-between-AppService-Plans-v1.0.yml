trigger:
  none

######################
#DECLARE PARAMETERS:-
######################
parameters:
- name: SubscriptionID
  displayName: Subscription ID details follows below:-
  type: string
  default: 210e66cb-55cf-424e-8daa-6cad804ab604
  values:
  - 210e66cb-55cf-424e-8daa-6cad804ab604

- name: RGName
  displayName: Please Provide the Resource Group Name:-
  type: object
  default: 

- name: AppServiceSourcePlanName
  displayName: Please Provide the Source App Service Plan Name:-
  type: object
  default: 

- name: AppServiceDestinationPlanName
  displayName: Please Provide the Destination App Service Plan Name:-
  type: object
  default:

- name: WebAppName
  displayName: Please Provide the App Service Name:-
  type: object
  default:

######################
#DECLARE VARIABLES:-
######################
variables:
  ServiceConnection: amcloud-cicd-service-connection
  BuildAgent: windows-latest
  envName: NonProd
  
#########################
# Declare Build Agents:-
#########################
pool:
  vmImage: $(BuildAgent)

###################
# Declare Stages:-
###################

stages:

- stage: Validate_ResourceGroup_AppServicePlans_WebApp
  jobs:
  - job: Validate_ResourceGroup_AppServicePlans_WebApp 
    displayName: Validate Resource Group App Service Plans and WebApp
    steps:
    - task: AzureCLI@2
      displayName: Set Azure Account
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az --version
          az account set --subscription ${{ parameters.SubscriptionID }}
          az account show  
    - task: AzureCLI@2
      displayName: Validate Resource Group
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |      
          $i = az group exists -n ${{ parameters.RGName }}
            if ($i -eq "true") {
              echo "#####################################################"
              echo "Resource Group ${{ parameters.RGName }} exists!!!"
              echo "#####################################################"              
            }
            else {
              echo "#############################################################"
              echo "Resource Group ${{ parameters.RGName }} DOES NOT exists!!!"
              echo "#############################################################"
              exit 1
            }
    - task: AzureCLI@2
      displayName: Validate Source App Service Plan
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |      
          $j = az appservice plan list --query "[?name=='${{ parameters.AppServiceSourcePlanName }}'].name" -o tsv
            if ($j -eq "${{ parameters.AppServiceSourcePlanName }}") {
              echo "##############################################################################"
              echo "Source App Service Plan ${{ parameters.AppServiceSourcePlanName }} exists!!!"
              echo "##############################################################################"              
            }
            else {
               echo "#######################################################################################"
              echo "Source App Service Plan ${{ parameters.AppServiceSourcePlanName }} DOES NOT exists!!!"
              echo "########################################################################################"
              exit 1
            }
    - task: AzureCLI@2
      displayName: Validate Destination App Service Plan
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |      
          $k = az appservice plan list --query "[?name=='${{ parameters.AppServiceDestinationPlanName }}'].name" -o tsv
            if ($k -eq "${{ parameters.AppServiceDestinationPlanName }}") {
              echo "#########################################################################################"
              echo "Destination App Service Plan ${{ parameters.AppServiceDestinationPlanName }} exists!!!"
              echo "#########################################################################################"              
            }
            else {
               echo "#################################################################################################"
              echo "Destination App Service Plan ${{ parameters.AppServiceDestinationPlanName }} DOES NOT exists!!!"
              echo "##################################################################################################"
              exit 1
            }        
    - task: AzureCLI@2
      displayName: Validate Web App
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |      
          $l = az webapp list --query "[?name=='${{ parameters.WebAppName }}'].name" -o tsv
            if ($l -eq "${{ parameters.WebAppName }}") {
              echo "#####################################################"
              echo "Web App ${{ parameters.WebAppName }} exists!!!"
              echo "#####################################################"              
            }
            else {
               echo "#############################################################"
              echo "Web App ${{ parameters.WebAppName }} DOES NOT exists!!!"
              echo "##############################################################"
              exit 1
            }
    - task: AzureCLI@2
      displayName: Validate Webspace
      inputs:
        azureSubscription: $(ServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |      
          $srcplanwebspace = az appservice plan show --name ${{ parameters.AppServiceSourcePlanName }} --resource-group ${{ parameters.RGName }} --query ["properties.webSpace"] -o tsv
          $destplanwebspace = az appservice plan show --name ${{ parameters.AppServiceDestinationPlanName }} --resource-group ${{ parameters.RGName }} --query ["properties.webSpace"] -o tsv
            if ($srcplanwebspace -eq $destplanwebspace) {
              echo "################################################"
              echo "Webspace of both App Service Plans matches!!!"
              echo "################################################"              
            }
            else {
              echo "##############################################################################################################################"
              echo "Webspace of both App Service Plans DOES NOT match and hence App Service ${{ parameters.WebAppName }} cannot be Migrated !!!"
              echo "##############################################################################################################################"
              exit 1
            }

- stage: Migrate_WebApp_Between_AppServicePlans
  condition: |
     and(succeeded(), 
       eq(variables['build.sourceBranch'], 'refs/heads/main')
     )
  jobs:
  - deployment: 
    displayName: Migrate WebApp Between App Service Plans
    environment: '$(envName)'
    pool:
      vmImage: $(BuildAgent)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: Set Azure Account
            inputs:
              azureSubscription: $(ServiceConnection)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                az --version
                az account set --subscription ${{ parameters.SubscriptionID }}
                az account show
          - task: AzureCLI@2
            displayName: Migrate WebApp 
            inputs:
              azureSubscription: $(ServiceConnection)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                az webapp update -g ${{ parameters.RGName }} -n ${{ parameters.WebAppName }} --set serverFarmId=/subscriptions/${{ parameters.SubscriptionID }}/resourceGroups/${{ parameters.RGName }}/providers/Microsoft.Web/serverfarms/${{ parameters.AppServiceDestinationPlanName }}
                echo "###########################################################################################################################################################################################################"
                echo "WebApp ${{ parameters.WebAppName }} migrated from Source App Service Plan ${{ parameters.AppServiceSourcePlanName }} to Destination App Service Plan ${{ parameters.AppServiceDestinationPlanName }}!!!"
                echo "###########################################################################################################################################################################################################"